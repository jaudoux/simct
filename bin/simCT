#! /usr/bin/perl
# PODNAME: simCT
# ABSTRACT: simCT binary

use strict;
use warnings;

#use CracTools::SimCT::App;
use Getopt::Long qw(:config auto_version); # Get options
use Pod::Usage;   # Printing pod documentation in terminal
use File::Spec;
use Cwd 'abs_path';
use Data::Dumper;
use Tie::RefHash;
use List::Util qw(first);

use CracTools::Utils 1.24;
use CracTools::Output;
use CracTools::SimCT;
use CracTools::SimCT::Const;

=head1 SYNOPSIS

simCT -g reference_genome/ -a annotations.gtf [-o my_simulation]

=head1 OPTIONS

=head2 General

  --help                  Print this help
  --man                   Open man page
  -p                      Number of threads/processes

=head2 Input / Output

  -o,--output-dir         Output directory (DEFAULT: 'simCT_simulation')
  -g,--genome-dir         Reference genome directory (with chromosomes splited in individual FASTA files)
  -a,--annotations        Annotations file in GTF format

=head2 Genome simulation

  -s,--substitution-rate  Rate a wich substitutions are randomly inserted in the reference genome
  -i,--insertion-rate     Rate a wich insertions are randomly inserted in the reference genome
  -d,--deletion-rate      Rate a wich deletions are randomly inserted in the reference genome
  -f,--nb-fusions         Number of fusions introduced in the simulated genome
  --vcf-file              A VCF file that contains mutations
  --vcf-ratio             Ratio of mutations that taken from the VCF source instead of random
                          (default: 0.8)

=head2 Transcription simulation

  --pre-mrna-rate         Rate a wich precursor RNAs are incorporated in the simulation.

=head2 Post-transcription

  --rna-editing-vcf       A VCF file that contains RNA-editing sites and a mutation frequence encoded
                          in the AF field.

=head2 Sequencing

  --flux-par              Flux parameter file (prioritary over the following option)
  --single-end            Single-end protocol
  --nb-molecules          Number of moleclules in the sample
  --nb-reads              Number of reads sequenced
  --reads-length          Length of sequenced reads
  --fragment-length       Mean fragment length
  --fragment-sd           Standard deviation of fragment length

=head2 Others

  --disable-error-encoding    Remove error encoding from read names
  --uniq-ids                  Read names are identical for both pairs

=cut

my ($help,$man,$verbose);
my ($disable_error_encoding,$uniq_ids,$single_end);
my ($genome_dir,$gtf_file,$flux_par,$vcf_file,$rna_editing_vcf);
my $sub_rate               = $CracTools::SimCT::Const::SUB_RATE;
my $ins_rate               = $CracTools::SimCT::Const::INS_RATE;
my $del_rate               = $CracTools::SimCT::Const::DEL_RATE;
my $output_dir             = $CracTools::SimCT::Const::OUTPUT_DIRECTORY;
my $max_splice_length      = $CracTools::SimCT::Const::MAX_SPLICE_LENGTH;
my $flux_nb_reads          = $CracTools::SimCT::Const::NB_READS;
my $flux_reads_length      = $CracTools::SimCT::Const::READS_LENGTH;
my $flux_fragment_length   = $CracTools::SimCT::Const::FRAGMENT_LENGTH;
my $flux_fragment_sd       = $CracTools::SimCT::Const::FRAGMENT_SD;
my $flux_nb_molecules      = $CracTools::SimCT::Const::NB_MOLECULES;
my $vcf_ratio  = 0.8;
my $nb_fusions = 0;
my $nb_process = 1;

my @ARGV_copy = @ARGV;

GetOptions( "v|verbose"             => \$verbose,
            "man"                   => \$man,
            "help"                  => \$help,
            "p=i"                   => \$nb_process,
            # Input / Output
            "o|output-dir=s"        => \$output_dir,
            "g|genome-dir=s"        => \$genome_dir,
            "a|annotations=s"       => \$gtf_file,

            # SimCT parameters
            "disable-error-encoding"=> \$disable_error_encoding,
            "uniq-ids"              => \$uniq_ids,
            "flux-par=s"            => \$flux_par,

            # Mutations parameters
            "s|substitution-rate=f" => \$sub_rate,
            "i|insertion-rate=f"    => \$ins_rate,
            "d|deletion-rate=f"     => \$del_rate,
            "f|nb-fusions=i"        => \$nb_fusions,
            "vcf-file=s"            => \$vcf_file,
            "vcf-ratio=f"           => \$vcf_ratio,

            # Post-transcription parameters
            "rna-editing-vcf"       => \$rna_editing_vcf,

            # Flux parameters
            "single-end"            => \$single_end,
            "nb-reads=i"            => \$flux_nb_reads,
            "reads-length=i"        => \$flux_reads_length,
            "fragment-length=i"     => \$flux_fragment_length,
            "fragment-sd=i"         => \$flux_fragment_sd,
            "nb-molecules=i"        => \$flux_nb_molecules,

          ) or pod2usage(-verbose => 1);

pod2usage(-verbose => 1)  if ($help);
pod2usage(-verbose => 2)  if ($man);

pod2usage(
  -message => "Mandatory argument '-genome-dir' is missing",
  -verbose => 1,
) unless defined $genome_dir;

pod2usage(
  -message => "Mandatory argument '-annotations' is missing",
  -verbose => 1,
) unless defined $gtf_file;

pod2usage(
  -message => "'--vcf-ratio' value ($vcf_ratio) must be comprise between 0 and 1",
  -verbose => 1,
) if defined $vcf_ratio && ($vcf_ratio < 0 || $vcf_ratio > 1);

$vcf_ratio = 0 if !defined $vcf_file;

# Create an output directory if not defined
mkdir $output_dir;

require CracTools::SimCT::Genome;
require CracTools::SimCT::Annotations;
require CracTools::SimCT::GenomeSimulator;
require CracTools::SimCT::MutationGenerator::Random;
require CracTools::SimCT::MutationGenerator::Fusion;
require CracTools::SimCT::MutationGenerator::VCF;
require CracTools::SimCT::ReadSimulator::FluxSimulator;


# Create the reference genome
print STDERR "Looking for FASTA references in $genome_dir";
opendir(GEN,$genome_dir) or die "Can't open $genome_dir: $!";
my %reference_sequence_files = map { (my $chr = $_) =~ /(?:chr)?(\S+)\.fa(?:\.gz)?$/ => File::Spec->catfile($genome_dir,$_) } grep{ /\.fa(?:\.gz)?$/ } readdir(GEN);
closedir(GEN);

# Print friendly message with found references
print STDERR "References found : \n".join("\n", map { "\t- ".$_." => ".$reference_sequence_files{$_}} keys %reference_sequence_files),"\n";

# Create the reference genome
print STDERR "Calculating references length\n";
my $genome = CracTools::SimCT::Genome->new(
  reference_sequence_files => \%reference_sequence_files,
);

# Load annotations
print STDERR "Loading annotations\n";
# Create the annotations
my $annotations = CracTools::SimCT::Annotations->new();
$annotations->loadGTF($gtf_file,$genome);


# Create the GenomeSimulator
print STDERR "Building GenomeSimulator (reading annotations)\n";
my $genome_simulator = CracTools::SimCT::GenomeSimulator->new(
  genome => $genome,
);

# Generate Mutations (random)
my $mutation_generator = CracTools::SimCT::MutationGenerator::Random->new(
  genome_simulator  => $genome_simulator,
  ins_rate          => $ins_rate - $ins_rate*$vcf_ratio,
  del_rate          => $del_rate - $del_rate*$vcf_ratio,
  sub_rate          => $sub_rate - $sub_rate*$vcf_ratio,
);

# Generate mutations
print STDERR "Generate random mutations (ins,del,sub)\n";
$mutation_generator->generateMutations();

if(defined $vcf_file) {
  my $vcf_mutation_generator = CracTools::SimCT::MutationGenerator::VCF->new(
    genome_simulator  => $genome_simulator,
    ins_rate          => $ins_rate*$vcf_ratio,
    del_rate          => $del_rate*$vcf_ratio,
    sub_rate          => $sub_rate*$vcf_ratio,
  );
  print STDERR "Loading VCF file ($vcf_file)\n";
  $vcf_mutation_generator->loadVCF($vcf_file);
  print STDERR "Generate random mutations from VCF\n";
  $vcf_mutation_generator->generateMutations();
}

# Generate Fusions
if(defined $nb_fusions) {
  my $fusion_generator = CracTools::SimCT::MutationGenerator::Fusion->new(
    genome_simulator  => $genome_simulator,
  );

  print STDERR "Generate random fusions\n";
  $fusion_generator->generateMutations($annotations,$nb_fusions);
}

# Create the simulated genome
print STDERR "Generate the simulated genome as FASTA and GTF\n";
my $simulated_genome_dir  = File::Spec->catfile($output_dir,"simulated_genome");
my $simulated_annotations = File::Spec->catfile($simulated_genome_dir,"annotations.gtf");
mkdir $simulated_genome_dir;
my $simulated_genome = $genome_simulator->generateGenome(
  genome_dir => $simulated_genome_dir,
  annotations => $annotations,
);

# Generate RNA-Seq reads for this genome
print STDERR "Generate flux simulation\n";
#my $flux_wrapper    = CracTools::SimCT::FluxWrapper->new();
#my $flux_output_dir = File::Spec->catfile($output_dir,"flux_simulation");
#mkdir $flux_output_dir;
my %flux_parameters = (
    POLYA_SHAPE       => 'NaN',
    TSS_MEAN          => 'NaN',
    READ_NUMBER       => $flux_nb_reads,
    READ_LENGTH       => $flux_reads_length,
    PAIRED_END        => $single_end? 'NO' : 'YES',
    NB_MOLECULES      => $flux_nb_molecules,
    FILTERING         => 'YES',
    SIZE_DISTRIBUTION => "N($flux_fragment_length,$flux_fragment_sd)",
);
if(defined $flux_par) {
  my $flux_par_fh = CracTools::Utils::getReadingFileHandle($flux_par);
  while(<$flux_par_fh>) {
    next if $_ =~ /^#/;
    my ($k,$v) = $_ =~ /^(\S+)\s+(\S+)/;
    if(defined $k && defined $v) {
      $flux_parameters{$k} = $v;
    }
  }
}

my $flux_simulator = CracTools::SimCT::ReadSimulator::FluxSimulator->new();
#my $simulation_dir = File::Temp->newdir();

my $flux_simulation = $flux_simulator->runSimulation(
  simulated_genome => $simulated_genome,
  simulation_dir => $output_dir,
  genome_dir => abs_path($simulated_genome_dir),
  annotation_file => abs_path($simulated_annotations),
  flux_parameters => \%flux_parameters,
);
