#! /usr/bin/perl

use strict;
use warnings;

use Getopt::Long qw(:config auto_version); # Get options
use Pod::Usage;   # Printing pod documentation in terminal
use File::Spec;
use Cwd 'abs_path';
use Data::Dumper;
use Tie::RefHash;
use List::Util qw(first);

use CracTools::Utils 1.24;
use CracTools::Output;
use CracTools::SimCT;
use CracTools::SimCT::Const;

=head1 SYNOPSIS

simCT -g reference_genome/ -a annotations.gtf [-o my_simulation]

=head1 OPTIONS

=head2 General

  --help                  Print this help
  --man                   Open man page
  -p                      Number of threads/processes

=head2 Input / Output

  -o,--output-dir         Output directory (DEFAULT: 'simCT_simulation')
  -g,--genome-dir         Reference genome directory (with chromosomes splited in individual FASTA files)
  -a,--annotations        Annotations file in GTF format

=head2 Genome simulation

  -s,--substitution-rate  Rate a wich substitutions are randomly inserted in the reference genome
  -i,--insertion-rate     Rate a wich insertions are randomly inserted in the reference genome
  -d,--deletion-rate      Rate a wich deletions are randomly inserted in the reference genome

=head2 Others

  --disable-error-encoding    Remove error encoding from read names
  --uniq-ids                  Read names are identical for both pairs

=cut

my ($help,$man,$verbose);
my ($disable_error_encoding,$uniq_ids,$single_end);
my ($genome_dir,$gtf_file);
my $sub_rate               = $CracTools::SimCT::Const::SUB_RATE;
my $ins_rate               = 0;
my $del_rate               = 0;
my $output_dir             = $CracTools::SimCT::Const::OUTPUT_DIRECTORY;
my $max_splice_length      = $CracTools::SimCT::Const::MAX_SPLICE_LENGTH;
my $vcf_ratio  = 0.8;
my $nb_fusions = 0;
my $nb_process = 1;
my $genotype_rate = 0.5;

my @ARGV_copy = @ARGV;

GetOptions( "v|verbose"             => \$verbose,
            "man"                   => \$man,
            "help"                  => \$help,
            "p=i"                   => \$nb_process,

            # Input / Output
            "o|output-dir=s"        => \$output_dir,
            "g|genome-dir=s"        => \$genome_dir,
            "a|annotations=s"       => \$gtf_file,

            # SimCT parameters
            "disable-error-encoding"=> \$disable_error_encoding,
            "uniq-ids"              => \$uniq_ids,

            # Mutations parameters
            "s|substitution-rate=f" => \$sub_rate,
            "i|insertion-rate=f"    => \$ins_rate,
            "d|deletion-rate=f"     => \$del_rate,

          ) or pod2usage(-verbose => 1);

pod2usage(-verbose => 1)  if ($help);
pod2usage(-verbose => 2)  if ($man);

pod2usage(
  -message => "Mandatory argument '-genome-dir' is missing",
  -verbose => 1,
) unless defined $genome_dir;

pod2usage(
  -message => "Mandatory argument '-annotations' is missing",
  -verbose => 1,
) unless defined $gtf_file;

require CracTools::SimCT::Genome;
require CracTools::SimCT::Annotations;
require CracTools::SimCT::GenomeSimulator;
require CracTools::SimCT::MutationGenerator::Random;

# Create the reference genome
print STDERR "Looking for FASTA references in $genome_dir";
opendir(GEN,$genome_dir) or die "Can't open $genome_dir: $!";
my %reference_sequence_files = map { (my $chr = $_) =~ /(?:chr)?(\S+)\.fa(?:\.gz)?$/ => File::Spec->catfile($genome_dir,$_) } grep{ /\.fa(?:\.gz)?$/ } readdir(GEN);
closedir(GEN);

# Print friendly message with found references
print STDERR "References found : \n".join("\n", map { "\t- ".$_." => ".$reference_sequence_files{$_}} keys %reference_sequence_files),"\n";

# Create the reference genome
print STDERR "Calculating references length\n";
my $genome = CracTools::SimCT::Genome->new(
 reference_sequence_files => \%reference_sequence_files,
);

# Load annotations
print STDERR "Loading annotations\n";
# Create the annotations
my $annotations = CracTools::SimCT::Annotations->new();
$annotations->loadGTF($gtf_file,$genome);

# Create the GenomeSimulator
print STDERR "Building GenomeSimulator (reading annotations)\n";
my $genome_simulator = CracTools::SimCT::GenomeSimulator->new(
 genome => $genome,
);

# Generate Homozygous mutations (random)
my $mutation_generator = CracTools::SimCT::MutationGenerator::Random->new(
 genome_simulator  => $genome_simulator,
 ins_rate          => $ins_rate,
 del_rate          => $del_rate,
 sub_rate          => $sub_rate,
);

# Generate mutations
print STDERR "Generate random mutations (ins,del,sub)\n";
$mutation_generator->generateMutations();

my $allele_A = CracTools::SimCT::GenomeSimulator->new(
 genome => $genome,
);
my $allele_B = CracTools::SimCT::GenomeSimulator->new(
 genome => $genome,
);

foreach my $mut ($genome_simulator->allMutations) {
  $allele_A->addMutation($mut);
  $allele_B->addMutation($mut);
}

$mutation_generator->genome_simulator($allele_A);
$mutation_generator->generateMutations();

$mutation_generator->genome_simulator($allele_B);
$mutation_generator->generateMutations();

# Create the simulated genome
print STDERR "Generate the simulated genome as FASTA and GTF\n";
mkdir $output_dir;
foreach my $allele_name (("allele_A", "allele_B")) {
  my $allele_genom_simulator;
  if($allele_name eq "allele_A") {
    $allele_genom_simulator = $allele_A;
  } else {
    $allele_genom_simulator = $allele_B;
  }
  my $simulated_genome_dir  = File::Spec->catfile($output_dir,$allele_name);
  my $simulated_annotations = File::Spec->catfile($output_dir,$allele_name,"annotations.gtf");
  mkdir $simulated_genome_dir;
  my $simulated_genome = $allele_genom_simulator->generateGenome(
    genome_dir => $simulated_genome_dir,
    annotations => $annotations,
  );
}

my $mutations_output = File::Spec->catfile($output_dir,"mutations.vcf.gz");
my $mutations_fh     = CracTools::Utils::getWritingFileHandle($mutations_output);

# Find haploide and diploide mutations
my %mut_hash;
foreach my $allele (($allele_A,$allele_B)) {
  foreach my $mut ($allele->allMutations) {
    my $mut_key = $mut->chr."@".$mut->start;
    push @{$mut_hash{$mut_key}}, $mut;
  }
}


# Print  mutations
my @mut_keys = sort { $mut_hash{$a}->[0]->chr cmp $mut_hash{$b}->[0]->chr || $mut_hash{$a}->[0]->start <=> $mut_hash{$b}->[0]->start } keys %mut_hash;
foreach my $mut_key (@mut_keys) {
  my @mutations = @{$mut_hash{$mut_key}};
  # Get raw VCF record
  my $vcf_line = $mutations[0]->getVCFRecord;
  # true haploide mutation
  if(@mutations == 1) {
    $vcf_line->{info}->{GT} = ["0|1"];
  } elsif(@mutations == 2) {
    # It is a diploide mutation
    if($mutations[0]->mutation_sequence eq $mutations[1]->mutation_sequence) {
      $vcf_line->{info}->{GT} = ["1|1"];
    # It is two haploÃ¯de mutations
    } else {
      $vcf_line->{alt} .= ",".$mutations[1]->mutation_sequence;
      $vcf_line->{info}->{GT} = ["1|2"];
    }
  }
  CracTools::SimCT::Utils::printVCFLine($mutations_fh,$vcf_line);
}
